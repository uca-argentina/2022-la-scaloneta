Class {
	#name : #LaScalonetaGameTest,
	#superclass : #TestCase,
	#category : #'IngSoft2-Tests'
}

{ #category : #asserting }
LaScalonetaGameTest >> assert: aSpaceship isAt: aPostion with: aLap in: aGame [

	self assert: (aGame positionOf: aSpaceship) tileNumber equals: aPostion .
	self assert: (aGame positionOf: aSpaceship) lap equals: aLap.
]

{ #category : #creating }
LaScalonetaGameTest >> gamePlayedByJorgeAndJulian [

	| aGame aBoard aDie1 aDeck anAccelerationCard aSpeedCard |

	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 2
		          finishingAfter: 2.

	aDie1 := LoadedDie with: 1.
	
	anAccelerationCard := AccelerationCard new.
	
	aSpeedCard := SpeedCard new.

	aDeck := LoadedDeck with: {anAccelerationCard. aSpeedCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: aBoard
		         rolling: aDie1
		         usingCardsFrom: aDeck.
	^ aGame
]

{ #category : #playing }
LaScalonetaGameTest >> playUntilFinished: aGame [

	[ aGame hasEnded ] whileFalse: [ aGame playNextTurn ]
]

{ #category : #tests }
LaScalonetaGameTest >> testAskingForTheWinnerWhenTheGameHasNotEndedThrowsAnErrorMessage [

	| aGame aBoard aDie1 aDeck anAccelerationCard |
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          NoEffect new.
				          NoEffect new }
				    and: 4 finishingAfter: 2.

	aDie1 := LoadedDie with: 1.
	
	anAccelerationCard := AccelerationCard new.

	aDeck := Deck with: {anAccelerationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: aBoard
		         rolling: aDie1
					usingCardsFrom: aDeck.

	self deny: aGame hasEnded.

	self
		should: [ aGame winner ]
		raise: Error
		withMessage: 'There is no winner as the game has not ended yet.'
]

{ #category : #tests }
LaScalonetaGameTest >> testEveryoneGoesBackToTheFirstPositionOnTheSameLapWhenJorgeLandsOnAnAtomicBombEffect [

	| aGame aBoard aDie1 aDie2 aDiceCup aDeck anAccelerationCard |
	aBoard := Board
		          with: { 
				          NoEffect new.
				          AtomicBombEffect new.
				          NoEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 5
		          finishingAfter: 2.

	aDie1 := LoadedDie with: 2.
	aDie2 := LoadedDie with: 1.

	aDiceCup := DiceCup withAll: { 
			            aDie1.
			            aDie2 }.
			
	anAccelerationCard := AccelerationCard new.

	aDeck := Deck with: {anAccelerationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian'. 'Hernan'. 'Tomas' }
		         on: aBoard
		         rolling: aDiceCup
		         usingCardsFrom: aDeck.

	aGame playNextTurn.
	aGame playNextTurn.
	aGame playNextTurn.
	aGame playNextTurn.
	aGame playNextTurn.

	self assert: 'Jorge' isAt: 1 with: 2 in: aGame.
	self assert: 'Julian' isAt: 1 with: 1 in: aGame.
	self assert: 'Hernan' isAt: 1 with: 1 in: aGame.
	self assert: 'Tomas' isAt: 1 with: 1 in: aGame.
]

{ #category : #tests }
LaScalonetaGameTest >> testFinalPositionOfSpaceShipsCorrespondsWithTheActualFinalPositions [

	| aGame aDiceCup aBoard aDie1 aDie2 aDie3 aDeck anAccelerationCard |
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 3
		          finishingAfter: 2.

	aDie1 := LoadedDie with: 1.
	aDie2 := LoadedDie with: 1.
	aDie3 := LoadedDie with: 1.
	
	anAccelerationCard := AccelerationCard new.

	aDeck := Deck with: {anAccelerationCard}.

	aDiceCup := DiceCup withAll: { 
			            aDie1.
			            aDie2.
			            aDie3 }.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: aBoard
		         rolling: aDiceCup
		         usingCardsFrom: aDeck.

	aGame playNextTurn.
	aGame playNextTurn.

	self assert: 'Jorge' isAt: 1 with: 2 in: aGame.
	self assert: 'Julian' isAt: 1 with: 2 in: aGame.

	aGame playNextTurn.

	self assert: 'Jorge' isAt: 3 with: 2 in: aGame.
	self assert: 'Julian' isAt: 1 with: 2 in: aGame.
	self assert: aGame hasEnded
]

{ #category : #tests }
LaScalonetaGameTest >> testGameHasEndedAsOneSpaceShipReachedTheEnd [

	| aGame aDiceCup aBoard aDie1 aDie2 aDie3 aDeck anAccelerationCard |
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 3
		          finishingAfter: 2.

	aDie1 := LoadedDie with: 1.
	aDie2 := LoadedDie with: 1.
	aDie3 := LoadedDie with: 1.
	
	anAccelerationCard := AccelerationCard new.

	aDeck := Deck with: {anAccelerationCard}.

	aDiceCup := DiceCup withAll: { 
			            aDie1.
			            aDie2.
			            aDie3 }.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: aBoard
		         rolling: aDiceCup
		         usingCardsFrom: aDeck.

	self deny: aGame hasEnded.

	aGame playNextTurn.
	aGame playNextTurn.
	aGame playNextTurn.

	self assert: aGame hasEnded.
	self assert: 'Jorge' isAt: 3 with: 2 in: aGame 
]

{ #category : #tests }
LaScalonetaGameTest >> testHyperJumpEffecDistancesCanNotContainsNegativeValues [

	self
		should: [ HyperJumpEffect with: {DistanceInParsecs with: 2. DistanceInParsecs with: -3. DistanceInParsecs with: 3.} ]
		raise: Error
		withMessage: 'Parsecs amount should be greater than zero'
]

{ #category : #tests }
LaScalonetaGameTest >> testHyperJumpEffectDistancesCanNotBeEmpty [

	self
		should: [ HyperJumpEffect with: #(  ) ]
		raise: Error
		withMessage: 'HyperJumpEffect can not be initalize with empty collection!'
]

{ #category : #tests }
LaScalonetaGameTest >> testJorgeAndJulianMovesFowardThreeTilesButThenAfterJulianApplyACancellationCardToTheAccelerationCardThatJorgeAppliedTheyOnlyMoveFowardTwoTiles [

	| aGame aBoard aDie1 aDie2 aDiceCup aCancellationCard anAccelerationCard aDeck cardPlay cardPlay1 |
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          DeliveryCardEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 12
		          finishingAfter: 2.
		
	aDie1 := LoadedDie with: 1.
	aDie2 := LoadedDie with: 1.

	aDiceCup := DiceCup withAll: { 
			            aDie1.
			            aDie2}.
			
	aCancellationCard := CancellationCard new.
	anAccelerationCard := AccelerationCard  new.
	
	aDeck := LoadedDeck with: {anAccelerationCard. aCancellationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: aBoard
		         rolling: aDiceCup
		         usingCardsFrom: aDeck.
		
	
	cardPlay := CardPlay with: anAccelerationCard appliedBy: 'Jorge'.  
	aGame apply: cardPlay.
	
	aGame playNextTurn.
	aGame playNextTurn.
	
	self assert: 'Jorge' isAt: 4 with: 1 in: aGame. 
	self assert: 'Julian' isAt: 4 with: 1 in: aGame. 
		
	cardPlay1 := CardPlay with: aCancellationCard appliedTo: anAccelerationCard by: 'Julian'.
	aGame apply: cardPlay1.
	
	aGame playNextTurn.
	aGame playNextTurn.
	
	self assert: 'Jorge' isAt: 1 with: 2 in: aGame.
	self assert: 'Julian' isAt: 1 with: 2 in: aGame.
]

{ #category : #tests }
LaScalonetaGameTest >> testJorgeCannotThrowAnAccelerationCardThatHeDoesNotHaveInHisHand [

	| aGame aBoard aDie1 aDie2 aDiceCup anAccelerationCard aSpeedCard aDeck cardPlay |

	anAccelerationCard := AccelerationCard new.
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          DeliveryCardEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 12
		          finishingAfter: 2.
		
	aDie1 := LoadedDie with: 1.
	aDie2 := LoadedDie with: 1.

	aDiceCup := DiceCup withAll: { 
			            aDie1.
			            aDie2}.
	
	anAccelerationCard := AccelerationCard new.

	aSpeedCard := SpeedCard new.

	aDeck := Deck with: {aSpeedCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: aBoard
		         rolling: aDiceCup
		         usingCardsFrom: aDeck.
	
	self assert: 'Jorge' isAt: 1 with: 1 in: aGame. 
	self assert: 'Julian' isAt: 1 with: 1 in: aGame.
		
	cardPlay := CardPlay with: anAccelerationCard appliedBy: 'Jorge'.  
	
	self
		should: [ aGame apply: cardPlay. ]
		raise: Error
		withMessage: 'The SpaceShip cannot throw this card because he does not have it'
]

{ #category : #tests }
LaScalonetaGameTest >> testJorgeCannotThrowanAccelerationCardWhenItIsNotHisTurn [

	| aGame aBoard aDie1 aDie2 aDiceCup anAccelerationCard aDeck cardPlay|

	anAccelerationCard := AccelerationCard new.
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          DeliveryCardEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 12
		          finishingAfter: 2.
		
	aDie1 := LoadedDie with: 1.
	aDie2 := LoadedDie with: 1.

	aDiceCup := DiceCup withAll: { 
			            aDie1.
			            aDie2}.
	
	anAccelerationCard := AccelerationCard new.

	aDeck := Deck with: {anAccelerationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: aBoard
		         rolling: aDiceCup
		         usingCardsFrom: aDeck.
	
	self assert: 'Jorge' isAt: 1 with: 1 in: aGame. 
	self assert: 'Julian' isAt: 1 with: 1 in: aGame.
	
	aGame playNextTurn.

	cardPlay := CardPlay with: anAccelerationCard appliedBy: 'Jorge'.  
	
	self
		should: [ aGame apply: cardPlay. ]
		raise: Error
		withMessage: 'Its not your turn!'
	
	


	
]

{ #category : #tests }
LaScalonetaGameTest >> testJorgeDoesNotMoveFowardAsTheNumberOfParsecsIsNotEnoughToMoveOneTile [

	| aGame aBoard aDie1 aDeck anAccelerationCard |

	aBoard := Board
		          with: { 
				          NoEffect new.
				          (HyperJumpEffect with: { DistanceInParsecs with: 1. }  ).
				          NoEffect new.
				          NoEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 12
		          finishingAfter: 2.

	aDie1 := LoadedDie with: 1.
	
	anAccelerationCard := AccelerationCard new.

	aDeck := Deck with: {anAccelerationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge' }
		         on: aBoard
		         rolling: aDie1
		         usingCardsFrom: aDeck.

	aGame playNextTurn.

	self assert: 'Jorge' isAt: 2 with: 1 in: aGame
]

{ #category : #tests }
LaScalonetaGameTest >> testJorgeGetsARepeatCardAndWhenHeThrowsItHeIsApplyingSpeedUpEffect [

	| aGame aBoard aDie1 aDie2 aDiceCup aRepeatCard aDeck cardPlay |
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          SpeedUpEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 12
		          finishingAfter: 3.
		
	aDie1 := LoadedDie with: 1.
	aDie2 := LoadedDie with: 1.

	aDiceCup := DiceCup withAll: { 
			            aDie1.
			            aDie2}.
			
	aRepeatCard := RepeatCard new.
	
	
	aDeck := LoadedDeck with: {aRepeatCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: aBoard
		         rolling: aDiceCup
		         usingCardsFrom: aDeck.
		
	aGame playNextTurn.
	aGame playNextTurn.
	
	self assert: 'Jorge' isAt: 2 with: 2 in: aGame. 
	
	cardPlay :=  CardPlay with: aRepeatCard appliedBy: 'Jorge'.
	aGame apply: cardPlay.
	
	self assert: 'Jorge' isAt: 1 with: 3 in: aGame. 
]

{ #category : #tests }
LaScalonetaGameTest >> testJorgeGetsAndThrowsAnAccelerationAffectingAllSpaceShipsSoThenAllMovesOneMoreTile [

	| aGame aBoard aDie1 aDie2 aDiceCup anAccelerationCard aDeck cardPlay |

	anAccelerationCard := AccelerationCard new.
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          DeliveryCardEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 12
		          finishingAfter: 2.
		
	aDie1 := LoadedDie with: 1.
	aDie2 := LoadedDie with: 1.

	aDiceCup := DiceCup withAll: { 
			            aDie1.
			            aDie2}.
	
	anAccelerationCard := AccelerationCard new.

	aDeck := Deck with: {anAccelerationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: aBoard
		         rolling: aDiceCup
		         usingCardsFrom: aDeck.
	
	self assert: 'Jorge' isAt: 1 with: 1 in: aGame. 
	self assert: 'Julian' isAt: 1 with: 1 in: aGame.
	
	cardPlay := CardPlay with: anAccelerationCard appliedBy: 'Jorge'.  
	aGame apply: cardPlay.
	
	aGame playNextTurn.
	
	self assert: 'Jorge' isAt: 4 with: 1 in: aGame.
	self assert: 'Julian' isAt: 1 with: 1 in: aGame.
	
	aGame playNextTurn.
	self assert: 'Jorge' isAt: 4 with: 1 in: aGame.
	self assert: 'Julian' isAt: 4 with: 1 in: aGame.	

	
]

{ #category : #tests }
LaScalonetaGameTest >> testJorgeGetsAndThrowsAnOverloadCardAffectingJulianSoJuliaStaysAtTheFirstPositionWhenHisRollingResultIsOneAsHeCanNotMoveFurtherBackThanFirstPosition [

	| aGame aBoard aDie1 anOverloadCard aDeck cardPlay |
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          DeliveryCardEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 12
		          finishingAfter: 2.
		
	aDie1 := LoadedDie with: 1.
	
	anOverloadCard := OverloadCard new.

	aDeck := Deck with: {anOverloadCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: aBoard
		         rolling: aDie1
		         usingCardsFrom: aDeck.
	
	self assert: 'Jorge' isAt: 1 with: 1 in: aGame. 
	self assert: 'Julian' isAt: 1 with: 1 in: aGame.
	
	cardPlay := CardPlay with: anOverloadCard appliedTo: 'Julian' by: 'Jorge'.
	aGame apply: cardPlay.
	
	aGame playNextTurn.
	
	self assert: 'Jorge' isAt: 2 with: 1 in: aGame.
	self assert: 'Julian' isAt: 1 with: 1 in: aGame.
]

{ #category : #tests }
LaScalonetaGameTest >> testJorgeGetsAndThrowsAnOverloadCardAffectingJulianSoJulianMovesOneTileBackwardsWhenHisRollingResultIsOne [

	| aGame aBoard aDie1 anOverloadCard aDeck cardPlay |

	anOverloadCard := OverloadCard new.
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          DeliveryCardEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 12
		          finishingAfter: 2.
		
	aDie1 := LoadedDie with: 1.
	
	anOverloadCard := OverloadCard new.

	aDeck := Deck with: {anOverloadCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: aBoard
		         rolling: aDie1
		         usingCardsFrom: aDeck.
	
	aGame playNextTurn.
	aGame playNextTurn.
		
	cardPlay := CardPlay with: anOverloadCard appliedTo: 'Julian' by: 'Jorge'.
	aGame apply: cardPlay.
	
	aGame playNextTurn.
	
	self assert: 'Jorge' isAt: 3 with: 1 in: aGame.
	self assert: 'Julian' isAt: 2 with: 1 in: aGame.
	
	aGame playNextTurn. 
	
	self assert: 'Jorge' isAt: 3 with: 1 in: aGame.
	self assert: 'Julian' isAt: 1 with: 1 in: aGame.
]

{ #category : #tests }
LaScalonetaGameTest >> testJorgeGetsAndThrowsAnOverloadCardAffectingJulianSoJulianMovesOneTileFowardWhenHisRollingResultIsThree [

	| aGame aBoard aDie1 anOverloadCard aDeck aDie2 aDiceCup cardPlay |

	anOverloadCard := OverloadCard new.
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          DeliveryCardEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 12
		          finishingAfter: 2.
		
	aDie1 := LoadedDie with: 1.
	aDie2 := LoadedDie with: 2.

	aDiceCup := DiceCup withAll: { 
			            aDie1.
			            aDie2}.
	
	anOverloadCard := OverloadCard new.

	aDeck := Deck with: {anOverloadCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: aBoard
		         rolling: aDiceCup
		         usingCardsFrom: aDeck.
	
	aGame playNextTurn.
	aGame playNextTurn.
		
	cardPlay := CardPlay with: anOverloadCard appliedTo: 'Julian' by: 'Jorge'.
	aGame apply: cardPlay.
	
	aGame playNextTurn.
	
	self assert: 'Jorge' isAt: 2 with: 2 in: aGame.
	self assert: 'Julian' isAt: 4 with: 1 in: aGame.
	
	aGame playNextTurn. 
	
	self assert: 'Jorge' isAt: 2 with: 2 in: aGame.
	self assert: 'Julian' isAt: 5 with: 1 in: aGame.
]

{ #category : #tests }
LaScalonetaGameTest >> testJorgeIsNotTheWinnerOfLaScalonetaGameWhenJulianReachesTheEndFirst [

	| aGame aBoard aDie1 aDiceCup aDie2 aDie3 aDeck anAccelerationCard |
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 4
		          finishingAfter: 1.

	aDie1 := LoadedDie with: 1.
	aDie2 := LoadedDie with: 1.
	aDie3 := LoadedDie with: 1.

	aDiceCup := DiceCup withAll: { 
			            aDie1.
			            aDie2.
			            aDie3 }.
			
	anAccelerationCard := AccelerationCard new.

	aDeck := Deck with: {anAccelerationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Julian'. 'Jorge' }
		         on: aBoard
		         rolling: aDiceCup
		         usingCardsFrom: aDeck.

	aGame playNextTurn.

	self deny: aGame winner equals: 'Jorge'
]

{ #category : #tests }
LaScalonetaGameTest >> testJorgeIsTheFirstSpaceShipAtSpaceShipsRankingAsHisPositionIsTheClosestToTheGoal [

	| aGame aDiceCup aBoard aDie1 aDeck anAccelerationCard |
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new }
		          and: 3
		          finishingAfter: 2.

	aDie1 := LoadedDie with: 1.
	aDiceCup := DiceCup withAll: { aDie1 }.

	anAccelerationCard := AccelerationCard new.

	aDeck := Deck with: {anAccelerationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian'. 'Lucas' }
		         on: aBoard
		         rolling: aDiceCup
		         usingCardsFrom: aDeck.

	aGame playNextTurn.
	aGame playNextTurn.
	aGame playNextTurn.
	aGame playNextTurn.

	self assert: aGame spaceShipsPositionsRanking first spaceShip equals: 'Jorge'.
	self assert: aGame spaceShipsPositionsRanking first tileNumber equals: 1.
	self assert: aGame spaceShipsPositionsRanking first lap equals: 2
]

{ #category : #tests }
LaScalonetaGameTest >> testJorgeMovesBackFourTilesWhenLandingOnAWormholeEffect [

	| aGame aBoard aDie1 aDie2 aDiceCup aDeck anAccelerationCard |
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          NoEffect new.
				          NoEffect new.
				          WormHoleEffect new.
				          NoEffect new }
		          and: 6
		          finishingAfter: 2.

	aDie1 := LoadedDie with: 2.
	aDie2 := LoadedDie with: 2.

	aDiceCup := DiceCup withAll: { 
			            aDie1.
			            aDie2 }.
			
	anAccelerationCard := AccelerationCard new.

	aDeck := Deck with: {anAccelerationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge' }
		         on: aBoard
		         rolling: aDiceCup
		         usingCardsFrom: aDeck.

	aGame playNextTurn.

	self assert: 'Jorge' isAt: 1 with: 1 in: aGame
]

{ #category : #tests }
LaScalonetaGameTest >> testJorgeMovesBackTwoPositionsAndBacksALapWhenJorgeLandsOnAMoonWalkEffect [

	| aGame aBoard aDie1 aDie2 aDiceCup aDeck anAccelerationCard |
	
	aBoard := Board
		          with: { 
				          (MoonWalkEffect with: -2).
				          NoEffect new.
				          NoEffect new }
		          and: 4
		          finishingAfter: 2.

	aDie1 := LoadedDie with: 2.
	aDie2 := LoadedDie with: 1.

	aDiceCup := DiceCup withAll: { 
			            aDie1.
			            aDie2 }.
			
	anAccelerationCard := AccelerationCard new.

	aDeck := Deck with: {anAccelerationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: aBoard
		         rolling: aDiceCup
		         usingCardsFrom: aDeck.

	aGame playNextTurn.
	
	self assert: 'Jorge' isAt: 1 with: 2 in: aGame.

	aGame playNextTurn.
	
	self assert: 'Jorge' isAt: 2 with: 1 in: aGame.
	self assert: 'Julian' isAt: 1 with: 2 in: aGame.
]

{ #category : #tests }
LaScalonetaGameTest >> testJorgeMovesForwardFourParsecsWhenLandingOnAHyperJumpEffectWithDistancesEqualsToOneLightYear [

	| aGame aBoard aDie1 aDeck anAccelerationCard |
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          (HyperJumpEffect with: {DistanceInLightYears  with: 12. DistanceInParsecs with: 2. DistanceInParsecs with: 3.}).
				          NoEffect new.
				          NoEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 3
		          finishingAfter: 2.
		
	aDie1 := LoadedDie with: 1.
	
	anAccelerationCard := AccelerationCard new.

	aDeck := Deck with: {anAccelerationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge' }
		         on: aBoard
		         rolling: aDie1
		         usingCardsFrom: aDeck.

	aGame playNextTurn.

	self assert: 'Jorge' isAt: 4 with: 2 in: aGame.
]

{ #category : #tests }
LaScalonetaGameTest >> testJorgeMovesForwardFourTilesWhenLandingOnASpeedUpEffect [

	| aGame aBoard aDie1 aDeck anAccelerationCard |
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          SpeedUpEffect new.
				          NoEffect new.
				          NoEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 6
		          finishingAfter: 2.

	aDie1 := LoadedDie with: 1.
	
	anAccelerationCard := AccelerationCard new.

	aDeck := Deck with: {anAccelerationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge' }
		         on: aBoard
		         rolling: aDie1
		         usingCardsFrom: aDeck.

	aGame playNextTurn.

	self assert: 'Jorge' isAt: 6 with: 1 in: aGame.

]

{ #category : #tests }
LaScalonetaGameTest >> testJorgeMovesForwardThreeParsecsWhenLandingOnAHyperJumpEffectDistancesEqualsToThreeParsecs [

	| aGame aBoard aDie1 aDeck anAccelerationCard |
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          (HyperJumpEffect with: {DistanceInParsecs with: 1. DistanceInParsecs with: 2. DistanceInParsecs with: 3.}).
				          NoEffect new.
				          NoEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 3
		          finishingAfter: 2.
		
	aDie1 := LoadedDie with: 1.
	
	anAccelerationCard := AccelerationCard new.

	aDeck := Deck with: {anAccelerationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge' }
		         on: aBoard
		         rolling: aDie1
		         usingCardsFrom: aDeck.

	aGame playNextTurn.

	self assert: 'Jorge' isAt: 2 with: 2 in: aGame.
]

{ #category : #tests }
LaScalonetaGameTest >> testJorgeMovesFowardThreeParsecsAndThenJulianMovesFowardTwoParsecsSinceTheyBothLandedOnAHyperJumpEffectAndThreeAndTwoWhereTheFirstDistancesValues [

	| aGame aBoard aDie1 aDeck anAccelerationCard |
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          (HyperJumpEffect with: {DistanceInParsecs with: 1. DistanceInParsecs with: 2. DistanceInParsecs with: 3.}).
				          NoEffect new.
				          NoEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 3
		          finishingAfter: 2.
		
	aDie1 := LoadedDie with: 1.
	
	anAccelerationCard := AccelerationCard new.

	aDeck := Deck with: {anAccelerationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: aBoard
		         rolling: aDie1
					usingCardsFrom: aDeck.

	aGame playNextTurn.

	self assert: 'Jorge' isAt: 2 with: 2 in: aGame.

	aGame playNextTurn.

	self assert: 'Julian' isAt: 6 with: 1 in: aGame.
]

{ #category : #tests }
LaScalonetaGameTest >> testJorgeMovesFowardThreeParsecsThenJulianMovesFowardTwoParsecsAndFinallyHernanMovesFowardThreeParsecsAgainWhenLadingOnAHyperJumpEffectInitializeWithTwoDistancesValues [

	| aGame aBoard aDie1 aDeck anAccelerationCard |
	aBoard := Board
		          with: { 
				          NoEffect new.
				          (HyperJumpEffect with: {DistanceInParsecs with: 2. DistanceInParsecs with: 3.}).
				          NoEffect new.
				          NoEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 3
		          finishingAfter: 2.

	aDie1 := LoadedDie with: 1.
	
	anAccelerationCard := AccelerationCard new.

	aDeck := Deck with: {anAccelerationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian'. 'Hernan' }
		         on: aBoard
		         rolling: aDie1
		         usingCardsFrom: aDeck.

	aGame playNextTurn.

	self assert: 'Jorge' isAt: 2 with: 2 in: aGame.

	aGame playNextTurn.

	self assert: 'Julian' isAt: 6 with: 1 in: aGame.

	aGame playNextTurn.

	self assert: 'Hernan' isAt: 2 with: 2 in: aGame
]

{ #category : #tests }
LaScalonetaGameTest >> testJorgeThrowsOneSpeedCardAndOneAcellerationCardSoWhenHeCanNotToThrowASpeedCardAgainAsHeDoesNotHaveItAnyMore [

	| aGame aBoard aDie1 aDeck anAccelerationCard aSpeedCard cardPlay cardPlay1 cardPlay2 |

	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 2
		          finishingAfter: 2.

	aDie1 := LoadedDie with: 1.
	
	anAccelerationCard := AccelerationCard new.
	
	aSpeedCard := SpeedCard new.

	aDeck := LoadedDeck with: {anAccelerationCard. aSpeedCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: aBoard
		         rolling: aDie1
		         usingCardsFrom: aDeck.
	
	cardPlay := CardPlay with: anAccelerationCard appliedBy: 'Jorge'.
	aGame apply: cardPlay.
	
	cardPlay1 := CardPlay with: aSpeedCard appliedTo: 'Jorge' by: 'Jorge'.
	aGame apply: cardPlay1.
	
	cardPlay2 := CardPlay with: aSpeedCard appliedTo: 'Jorge' by: 'Jorge'.
	
		self
		should: [ aGame apply: cardPlay2. ]
		raise: Error
		withMessage: 'The SpaceShip cannot throw this card because he does not have it'
	
	

]

{ #category : #tests }
LaScalonetaGameTest >> testJorgeThrowsTwoSpeedCardsSoWhenHeRollsTheLoadedDieWithOneHeMovesFowardToTheSpeedUpEffectSoHisFinalPositionIsTileNumberEight [

	| aGame aBoard aDie1 aDeck aSpeedCard cardPlay |
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          NoEffect new.
				          SpeedUpEffect new.
				          NoEffect new.
				          NoEffect new.
				          NoEffect new.
				          NoEffect new.
				          NoEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 6
		          finishingAfter: 2.
	aDie1 := LoadedDie with: 1.
	aSpeedCard := SpeedCard new.
	aDeck := Deck with: { aSpeedCard }.
	aGame := LaScalonetaGame
		         playedBy: { 'Jorge' }
		         on: aBoard
		         rolling: aDie1
		         usingCardsFrom: aDeck.
		
	cardPlay := CardPlay with: aSpeedCard appliedTo: 'Jorge' by: 'Jorge'.
	aGame apply: cardPlay.	
	aGame apply: cardPlay.	

	aGame playNextTurn.
	
	self assert: 'Jorge' isAt: 8 with: 1 in: aGame
]

{ #category : #tests }
LaScalonetaGameTest >> testJorgeWinsLaScalonetaGameWhenJorgeReachesTheEndFirst [

	| aGame aBoard aDie1 aDie2 aDie3 aDiceCup aDeck anAccelerationCard |
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 4
		          finishingAfter: 1.
	
	aDie1 := LoadedDie with: 1.
	aDie2 := LoadedDie with: 1.
	aDie3 := LoadedDie with: 1.

	aDiceCup := DiceCup withAll: { 
			            aDie1.
			            aDie2.
			            aDie3 }.

	anAccelerationCard := AccelerationCard new.

	aDeck := Deck with: {anAccelerationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: aBoard
		         rolling: aDiceCup
					usingCardsFrom: aDeck.

	aGame playNextTurn.

	self assert: aGame winner equals: 'Jorge'
]

{ #category : #tests }
LaScalonetaGameTest >> testJulianCancelsASpeedCardWhenIsNotHisTurn [

	| aGame aBoard aDie1 aDie2 aDiceCup aCancellationCard aSpeedCard aDeck cardPlay cardPlay1 |
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          DeliveryCardEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 12
		          finishingAfter: 2.
		
	aDie1 := LoadedDie with: 1.
	aDie2 := LoadedDie with: 1.

	aDiceCup := DiceCup withAll: { 
			            aDie1.
			            aDie2}.
			
	aCancellationCard := CancellationCard new.
	aSpeedCard := SpeedCard new.
	
	aDeck := LoadedDeck with: {aSpeedCard. aCancellationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: aBoard
		         rolling: aDiceCup
		         usingCardsFrom: aDeck.
		
	self assert: 'Jorge' isAt: 1 with: 1 in: aGame. 
	self assert: 'Julian' isAt: 1 with: 1 in: aGame. 
		
	cardPlay := CardPlay with: aSpeedCard appliedTo: 'Julian' by: 'Jorge'.
	aGame apply: cardPlay.
	
	cardPlay1 := CardPlay with: aCancellationCard appliedTo: aSpeedCard by: 'Julian'.
	aGame apply: cardPlay1.
	
	aGame playNextTurn.
	
	self assert: 'Jorge' isAt: 3 with: 1 in: aGame. 
	self assert: 'Julian' isAt: 1 with: 1 in: aGame.


]

{ #category : #tests }
LaScalonetaGameTest >> testJulianCannotCancelACardThatIsNotAffectingTheGame [

	| aGame aBoard aDie1 aDie2 aDiceCup aCancellationCard aSpeedCard aDeck cardPlay1 |
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          DeliveryCardEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 12
		          finishingAfter: 2.
		
	aDie1 := LoadedDie with: 1.
	aDie2 := LoadedDie with: 1.

	aDiceCup := DiceCup withAll: { 
			            aDie1.
			            aDie2}.
			
	aCancellationCard := CancellationCard new.
	aSpeedCard := SpeedCard new.
	
	aDeck := LoadedDeck with: {aCancellationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: aBoard
		         rolling: aDiceCup
		         usingCardsFrom: aDeck.
	
	aGame playNextTurn.
	
	cardPlay1 := CardPlay with: aCancellationCard appliedTo: aSpeedCard by: 'Julian'.
	
	self
		should: [ aGame apply: cardPlay1. ]
		raise: Error
		withMessage: 'There is no CardsHand with the card to be removed'
]

{ #category : #tests }
LaScalonetaGameTest >> testJulianCannotThrowAReDoCardBecauseThereWasNoCardPlayedBefore [

	| aGame aBoard aDie1 aDie2 aDiceCup aReDoCard aDeck cardPlay |
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          DeliveryCardEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 12
		          finishingAfter: 2.
		
	aDie1 := LoadedDie with: 1.
	aDie2 := LoadedDie with: 1.

	aDiceCup := DiceCup withAll: { 
			            aDie1.
			            aDie2}.
			
	aReDoCard := ReDoCard new.
	
	aDeck := LoadedDeck with: {aReDoCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: aBoard
		         rolling: aDiceCup
		         usingCardsFrom: aDeck.
		
	cardPlay := CardPlay with: aReDoCard appliedTo: 'Jorge' by: 'Jorge'.

	self
		should: [ aGame apply: cardPlay. ]
		raise: Error
		withMessage: 'This card cannot be played because there was no card played before'
	
]

{ #category : #tests }
LaScalonetaGameTest >> testJulianDoesNotGoBackFurtherThanFirstPositionOfFirstLapWhenAffectedByAWormholeOnSecondPositionOfFirstLap [

| aGame aBoard aDie1 aDeck anAccelerationCard |

	aBoard := Board
		          with: { 
				          NoEffect new.
				          WormHoleEffect new.
				          NoEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 6
		          finishingAfter: 2.

	aDie1 := LoadedDie with: 1.
	
	anAccelerationCard := AccelerationCard new.

	aDeck := Deck with: {anAccelerationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge' }
		         on: aBoard
		         rolling: aDie1
		         usingCardsFrom: aDeck.
		
	aGame playNextTurn.
	
	self assert: 'Jorge' isAt: 1 with: 1 in: aGame
]

{ #category : #tests }
LaScalonetaGameTest >> testJulianGetsACancellationCardAndGetsRidOfSpeedCard [

	| aGame aBoard aDie1 aDie2 aDiceCup aCancellationCard aSpeedCard aDeck cardPlay cardPlay1 |
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          DeliveryCardEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 12
		          finishingAfter: 2.
		
	aDie1 := LoadedDie with: 1.
	aDie2 := LoadedDie with: 1.

	aDiceCup := DiceCup withAll: { 
			            aDie1.
			            aDie2}.
			
	aCancellationCard := CancellationCard new.
	aSpeedCard := SpeedCard new.
	
	aDeck := LoadedDeck with: {aSpeedCard. aCancellationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: aBoard
		         rolling: aDiceCup
		         usingCardsFrom: aDeck.
	
	cardPlay := CardPlay with: aSpeedCard appliedTo: 'Julian' by: 'Jorge'.
	aGame apply: cardPlay.
	
	aGame playNextTurn.
	aGame playNextTurn.
	aGame playNextTurn.
	
	self assert: 'Jorge' isAt: 5 with: 1 in: aGame.
	self assert: 'Julian' isAt: 4 with: 1 in: aGame.
	
	cardPlay1 := CardPlay with: aCancellationCard appliedTo: aSpeedCard by: 'Julian'.
	aGame apply: cardPlay1.

	aGame playNextTurn.
	aGame playNextTurn.
	
	self assert: 'Jorge' isAt: 2 with: 2 in: aGame.
	self assert: 'Julian' isAt: 1 with: 2 in: aGame.	
]

{ #category : #tests }
LaScalonetaGameTest >> testJulianGetsAReDoCardAfterJorgeThrewAnSpeedCardAndPlaysIt [

	| aGame aBoard aDie1 aDie2 aDiceCup aReDoCard aSpeedCard aDeck cardPlay cardPlay1 |
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          DeliveryCardEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 12
		          finishingAfter: 2.
		
	aDie1 := LoadedDie with: 1.
	aDie2 := LoadedDie with: 1.

	aDiceCup := DiceCup withAll: { 
			            aDie1.
			            aDie2}.
			
	aReDoCard := ReDoCard new.
	aSpeedCard := SpeedCard new.
	
	aDeck := LoadedDeck with: {aSpeedCard. aReDoCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: aBoard
		         rolling: aDiceCup
		         usingCardsFrom: aDeck.
	
	cardPlay := CardPlay with: aSpeedCard appliedTo: 'Jorge' by: 'Jorge'.
	aGame apply: cardPlay.
				
	aGame playNextTurn.
	
	cardPlay1 := CardPlay with: aReDoCard appliedTo: 'Julian' by: 'Julian'.
	aGame apply: cardPlay1. 
		
	aGame playNextTurn.

	self assert: 'Jorge' isAt: 4 with: 1 in: aGame.
	self assert: 'Julian' isAt: 4 with: 1 in: aGame.
]

{ #category : #tests }
LaScalonetaGameTest >> testJulianIsTheThirdSpaceShipAtSpaceShipsRankingAsHisPositionIsTheThirdClosestToTheGoal [

	| aGame aBoard aDie1 aDeck anAccelerationCard |
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new }
		          and: 3
		          finishingAfter: 2.

	aDie1 := LoadedDie with: 1.

	anAccelerationCard := AccelerationCard new.

	aDeck := Deck with: {anAccelerationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian'. 'Lucas' }
		         on: aBoard
		         rolling: aDie1
		         usingCardsFrom: aDeck.

	aGame playNextTurn.
	aGame playNextTurn.
	aGame playNextTurn.
	aGame playNextTurn.

	self assert: aGame spaceShipsPositionsRanking third spaceShip equals: 'Julian'.
	self assert: aGame spaceShipsPositionsRanking third tileNumber equals: 2.
	self assert: aGame spaceShipsPositionsRanking third lap equals: 1
]

{ #category : #tests }
LaScalonetaGameTest >> testLaScalonetaGameEndWhenPlayingWithARandomDie [

	| aGame aBoard aDie1 aDeck anAccelerationCard |
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 2
		          finishingAfter: 2.

	aDie1 := RandomDie with: 3.
	
	anAccelerationCard := AccelerationCard new.

	aDeck := Deck with: {anAccelerationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Julian'. 'Jorge' }
		         on: aBoard
		         rolling: aDie1
		         usingCardsFrom: aDeck.

	self deny: aGame hasEnded.

	self playUntilFinished: aGame.

	self assert: aGame hasEnded
]

{ #category : #tests }
LaScalonetaGameTest >> testLaScalonetaGameMustHaveAtLeastOneSpaceShip [

	| aBoard aDie1 aDeck anAccelerationCard |
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 3
		          finishingAfter: 2.
	
	aDie1 := LoadedDie with: 1.
	
	anAccelerationCard := AccelerationCard new.

	aDeck := Deck with: {anAccelerationCard}.

	self
		should: [ 
			LaScalonetaGame
				playedBy: {  }
				on: aBoard
				rolling: aDie1
				usingCardsFrom: aDeck ]
		raise: Error
		withMessage: 'La Scaloneta Game must have at least one spaceship!'
]

{ #category : #tests }
LaScalonetaGameTest >> testLaScalonetaGameMustHaveOneOrMoreLaps [

	self
		should: [
			Board
		          with: { 
						NoEffect new.
						NoEffect new.
						NoEffect new }
		          and: 3
		          finishingAfter: 0. ]
		raise: Error
		withMessage: 'La Scaloneta Game must have one or more laps!'
]

{ #category : #tests }
LaScalonetaGameTest >> testPlayingAfterWinningIsNotAllowed [

	| aGame aBoard aDie1 aDie2 aDie3 aDiceCup aDeck anAccelerationCard |
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 3
		          finishingAfter: 2.
	
	aDie1 := LoadedDie with: 1.
	aDie2 := LoadedDie with: 1.
	aDie3 := LoadedDie with: 1.
	aDiceCup := DiceCup withAll: { aDie1. aDie2. aDie3 }.

	anAccelerationCard := AccelerationCard new.

	aDeck := Deck with: {anAccelerationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: aBoard
		         rolling: aDiceCup
		         usingCardsFrom: aDeck.

	self deny: aGame hasEnded.
	self assert: 'Jorge' isAt: 1 with: 1 in: aGame.
	self assert: 'Julian' isAt: 1 with: 1 in: aGame.

	aGame playNextTurn.

	self assert: 'Jorge' isAt: 1 with: 2 in: aGame.
	self assert: 'Julian' isAt: 1 with: 1 in: aGame.

	aGame playNextTurn.
	aGame playNextTurn.

	self assert: aGame hasEnded.

	self
		should: [ aGame playNextTurn ]
		raise: Error
		withMessage: 'La Scaloneta Game has already ended!'
]

{ #category : #tests }
LaScalonetaGameTest >> testScalonetaGamePlayedWithRandomBoardRandomDieAndDeck [

	| tilesCollection board aGame pool aDie1 aDie2 aDiceCup aDeck anAccelerationCard aSpeedCard aReDoCard anOverloadCard |
	pool := EffectPool with:
				        { 
				(ProbabilisticEvent with: NoEffect new and: 0.40).
				(ProbabilisticEvent with: (MoonWalkEffect with: -2) and: 0.10).
				(ProbabilisticEvent with: (HyperJumpEffect with: {DistanceInLightYears  with: 12. DistanceInParsecs with: 2. DistanceInParsecs with: 3.}) and: 0.08).
				(ProbabilisticEvent with:  AtomicBombEffect new and: 0.02).
				(ProbabilisticEvent with: WormHoleEffect new and: 0.2).
				(ProbabilisticEvent with:  SpeedUpEffect new and: 0.2).
				  }.
	tilesCollection := pool randomCollectionOfEffectsWith: 5.
	board := Board with: tilesCollection and: 2 finishingAfter: 2.
	
	aDie1 := RandomDie with: 3.
	aDie2 := RandomDie with: 4.
	aDiceCup := DiceCup withAll: { 
			            aDie1.
			            aDie2 }.
			
	anAccelerationCard := AccelerationCard new.
	aSpeedCard := SpeedCard new.
	aReDoCard := ReDoCard new.
	anOverloadCard := OverloadCard new.
	
	aDeck := Deck with: {anAccelerationCard. aSpeedCard. aReDoCard. anOverloadCard }.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: board
		         rolling: aDiceCup
		         usingCardsFrom: aDeck.
	

	self playUntilFinished: aGame.

	self assert: aGame hasEnded
	

]

{ #category : #tests }
LaScalonetaGameTest >> testSpaceShipMovesThreeTilesFowardWhenRollingResultEqualsToThree [

	| aGame aBoard aDie1 aDie2 aDiceCup aDeck anAccelerationCard |
	
	aBoard := Board
		          with: { 
				          NoEffect new.
				          NoEffect new.
				          NoEffect new.
				          NoEffect new }
		          and: 4
		          finishingAfter: 2.
	
	aDie1 := LoadedDie with: 2.
	aDie2 := LoadedDie with: 1.
	aDiceCup := DiceCup withAll: { aDie1. aDie2 }.
	
	anAccelerationCard := AccelerationCard new.

	aDeck := Deck with: {anAccelerationCard}.

	aGame := LaScalonetaGame
		         playedBy: { 'Jorge'. 'Julian' }
		         on: aBoard
		         rolling: aDiceCup
				   usingCardsFrom: aDeck.

	aGame playNextTurn.

	self assert: 'Jorge' isAt: 4 with: 1 in: aGame.
]

{ #category : #tests }
LaScalonetaGameTest >> testSpaceShipStartsAtTileNumberOneAndLapNumberOne [

	| aGame |
	aGame := self gamePlayedByJorgeAndJulian.

	self assert: 'Jorge' isAt: 1 with: 1 in: aGame.
	self assert: 'Julian' isAt: 1 with: 1 in: aGame.
]
